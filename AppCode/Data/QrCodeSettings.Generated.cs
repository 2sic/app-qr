// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "QrCodeSettings.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class QrCodeSettings
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: QR Code/
// User:        2sic Web-Developer
// When:        2024-04-05 08:43:06Z
namespace AppCode.Data
{
  // This is a generated class for QrCodeSettings 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// QrCodeSettings data. <br/>
  /// Generated 2024-04-05 08:43:06Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.BackgroundColor`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class QrCodeSettings: AutoGenerated.ZagQrCodeSettings
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.QrCodeSettings in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagQrCodeSettings: Custom.Data.CustomItem
  {
    /// <summary>
    /// BackgroundColor as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("BackgroundColor", scrubHtml: true) etc.
    /// </summary>
    public string BackgroundColor => _item.String("BackgroundColor", fallback: "");

    /// <summary>
    /// Border as int. <br/>
    /// To get other types use methods such as .Decimal("Border")
    /// </summary>
    public int Border => _item.Int("Border");

    /// <summary>
    /// Color as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Color", scrubHtml: true) etc.
    /// </summary>
    public string Color => _item.String("Color", fallback: "");

    /// <summary>
    /// ErrorCorrection as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ErrorCorrection", scrubHtml: true) etc.
    /// </summary>
    public string ErrorCorrection => _item.String("ErrorCorrection", fallback: "");

    /// <summary>
    /// ShowLinkOrTitleBelow as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ShowLinkOrTitleBelow", scrubHtml: true) etc.
    /// </summary>
    public string ShowLinkOrTitleBelow => _item.String("ShowLinkOrTitleBelow", fallback: "");

    /// <summary>
    /// Size as int. <br/>
    /// To get other types use methods such as .Decimal("Size")
    /// </summary>
    public int Size => _item.Int("Size");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}